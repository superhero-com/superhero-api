<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Affiliation Tree</title>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/d3-org-chart@2"></script>
    <script src="https://cdn.jsdelivr.net/npm/d3-flextree@2.1.2/build/d3-flextree.js"></script>
    <style>
        html,
        body {
            margin: 0;
            padding: 0;
            height: 100%;
            width: 100%;
            overflow: hidden;
            background-color: #f0f2f5;
        }

        #chart-container {
            height: 100vh;
            width: 100vw;
            position: relative;
        }

        .node-card {
            fill: white;
            stroke: #e0e0e0;
            stroke-width: 1px;
            rx: 6;
            ry: 6;
        }

        .node-title {
            fill: #2c3e50;
            font-size: 12px;
            font-weight: 500;
        }

        .node-content {
            fill: #666;
            font-size: 11px;
        }

        .node-card:hover {
            filter: brightness(0.95);
        }

        .link {
            stroke: #2c3e50;
            stroke-width: 1.5px;
        }

        .node-card.selected {
            stroke: #2c3e50;
            stroke-width: 2px;
        }
    </style>
</head>

<body>
    <div id="chart-container"></div>

    <script>
        // Configuration Constants
        const CHART_CONFIG = {
            node: {
                width: 342,
                height: 500,
                borderWidth: 1,
                borderRadius: 5,
                borderColor: { red: 15, green: 140, blue: 121, alpha: 1 },
                backgroundColor: { red: 51, green: 182, blue: 208, alpha: 1 },
                connectorLineColor: { red: 220, green: 189, blue: 207, alpha: 1 },
                connectorLineWidth: 5
            },
            chart: {
                initialZoom: 0.6,
                renderDelay: 1000,
               
            },
            api: {
                invitationsPath: '/api/invitations',
                accountsBaseUrl: 'https://wordcraft.fun/accounts/',
                avatarBaseUrl: 'https://avatars.superherowallet.com/',
                pageLimit: 100
            },
            styles: {
                fontFamily: 'Inter',
                backgroundColor: '#FFFFFF',
                textColor: '#08011E',
                fontSize: {
                    large: '15px',
                    medium: '14px',
                    small: '12px',
                    tiny: '10px'
                }
            }
        };

        // Utility Functions
        const Utils = {
            formatAddress(address) {
                if (!address) return '';
                return `${address.slice(0, 7)}...${address.slice(-4)}`;
            },

            safeGet(obj, path, defaultValue = 0, formatter = (value) => value) {
                return formatter(path.split('.').reduce((current, key) => current?.[key], obj) ?? defaultValue);
            }
        };

        // Node Factory
        const NodeFactory = {
            createBaseNode(nodeId, parentNodeId = null) {
                return {
                    nodeId,
                    parentNodeId,
                    width: CHART_CONFIG.node.width,
                    height: CHART_CONFIG.node.height,
                    borderWidth: CHART_CONFIG.node.borderWidth,
                    borderRadius: CHART_CONFIG.node.borderRadius,
                    borderColor: CHART_CONFIG.node.borderColor,
                    backgroundColor: CHART_CONFIG.node.backgroundColor,
                    connectorLineColor: CHART_CONFIG.node.connectorLineColor,
                    connectorLineWidth: CHART_CONFIG.node.connectorLineWidth,
                    dashArray: "",
                    expanded: false,
                    directSubordinates: 0,
                    totalSubordinates: 0
                };
            },

            createRootNode(totalInviters, totalVolume = 0) {
                const node = this.createBaseNode('root', null);
                return {
                    ...node,
                    template: `
                        <div style="
                            font-family: '${CHART_CONFIG.styles.fontFamily}', sans-serif;
                            background: linear-gradient(135deg, #1e3a8a 0%, #3730a3 50%, #581c87 100%);
                            position: absolute;
                            margin-top: -1px; 
                            margin-left: -1px;
                            width: ${CHART_CONFIG.node.width}px;
                            height: ${CHART_CONFIG.node.height}px;
                            border-radius: 20px;
                            border: 3px solid #fbbf24;
                            box-shadow: 0 8px 25px -5px rgba(0, 0, 0, 0.3), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
                            overflow: hidden;
                            position: relative;
                        ">
                            <!-- Decorative Elements -->
                            <div style="
                                position: absolute;
                                top: -50px;
                                right: -50px;
                                width: 100px;
                                height: 100px;
                                background: rgba(255, 255, 255, 0.1);
                                border-radius: 50%;
                            "></div>
                            <div style="
                                position: absolute;
                                bottom: -30px;
                                left: -30px;
                                width: 60px;
                                height: 60px;
                                background: rgba(255, 255, 255, 0.05);
                                border-radius: 50%;
                            "></div>

                            <!-- Header Section -->
                            <div style="
                                text-align: center;
                                padding: 30px 20px 20px;
                                position: relative;
                                z-index: 2;
                            ">
                                <!-- Crown Icon -->
                                <div style="
                                    font-size: 48px;
                                    margin-bottom: 15px;
                                    filter: drop-shadow(0 2px 4px rgba(0,0,0,0.3));
                                ">👑</div>
                                
                                <!-- Title -->
                                <h1 style="
                                    margin: 0 0 8px 0;
                                    font-size: 24px;
                                    font-weight: 800;
                                    color: white;
                                    text-shadow: 0 2px 4px rgba(0,0,0,0.3);
                                    letter-spacing: 0.5px;
                                ">BCL Affiliation Tree</h1>
                                
                                <!-- Subtitle -->
                                <p style="
                                    margin: 0 0 25px 0;
                                    font-size: 14px;
                                    color: rgba(255, 255, 255, 0.9);
                                    font-weight: 500;
                                ">Network Overview Dashboard</p>
                            </div>

                            <!-- Stats Section -->
                            <div style="
                                background: rgba(255, 255, 255, 0.1);
                                backdrop-filter: blur(10px);
                                margin: 0 20px;
                                border-radius: 12px;
                                padding: 20px;
                                position: relative;
                                z-index: 2;
                            ">
                                <!-- Total Inviters -->
                                <div style="text-align: center; margin-bottom: 10px;">
                                    <div style="
                                        font-size: 28px;
                                        font-weight: 900;
                                        color: #fbbf24;
                                        text-shadow: 0 2px 4px rgba(0,0,0,0.3);
                                        margin-bottom: 5px;
                                    ">${totalInviters}</div>
                                    <div style="
                                        font-size: 12px;
                                        color: rgba(255, 255, 255, 0.8);
                                        font-weight: 600;
                                        text-transform: uppercase;
                                        letter-spacing: 0.5px;
                                    ">Root Inviters</div>
                                </div>
                                <!-- Total Volume -->
                                <div style="text-align: center;">
                                    <div style="
                                        font-size: 28px;
                                        font-weight: 900;
                                        color: #10b981;
                                        text-shadow: 0 2px 4px rgba(0,0,0,0.3);
                                        margin-bottom: 5px;
                                    ">${Number(totalVolume).toFixed(2)}</div>
                                    <div style="
                                        font-size: 12px;
                                        color: rgba(255, 255, 255, 0.8);
                                        font-weight: 600;
                                        text-transform: uppercase;
                                        letter-spacing: 0.5px;
                                        line-height: 1.2;
                                    ">Total AE Volume</div>
                                </div>
                            </div>

                            <!-- Footer -->
                            <div style="
                                text-align: center;
                                padding: 20px;
                                position: relative;
                                z-index: 2;
                            ">
                                <div style="
                                    font-size: 12px;
                                    color: rgba(255, 255, 255, 0.6);
                                    font-weight: 500;
                                ">Blockchain Community Layer</div>
                            </div>
                        </div>
                    `,
                    expanded: true,
                    directSubordinates: totalInviters,
                    totalSubordinates: totalInviters
                };
            },

            createAddressNode(address, inviteeCount = 0) {
                const node = this.createBaseNode(address, null);
                return {
                    ...node,
                    template: `
                        <div style="padding: 10px; text-align: center;">
                            <div style="font-size: ${CHART_CONFIG.styles.fontSize.medium}; font-weight: 500;">${Utils.formatAddress(address)}</div>
                            <div style="font-size: ${CHART_CONFIG.styles.fontSize.small}; color: #666;">Invited: ${inviteeCount}</div>
                        </div>
                    `
                };
            }
        };

        // Template Generator
        const TemplateGenerator = {
            getHeaderGradient(depth) {
                // Define different gradients for each hierarchy level
                const gradients = [
                    'linear-gradient(135deg, #667EEA 0%, #764BA2 100%)', // Level 0 - Purple
                    'linear-gradient(135deg, #4FACFE 0%, #00F2FE 100%)', // Level 1 - Blue
                    'linear-gradient(135deg, #43E97B 0%, #38F9D7 100%)', // Level 2 - Green
                    'linear-gradient(135deg, #FA709A 0%, #FEE140 100%)', // Level 3 - Pink to Yellow
                    'linear-gradient(135deg, #A8EDEA 0%, #FED6E3 100%)', // Level 4 - Mint to Pink
                    'linear-gradient(135deg, #FF9A9E 0%, #FECFEF 100%)', // Level 5 - Coral to Pink
                    'linear-gradient(135deg, #FFECD2 0%, #FCB69F 100%)', // Level 6 - Peach
                    'linear-gradient(135deg, #A18CD1 0%, #FBC2EB 100%)', // Level 7 - Lavender
                    'linear-gradient(135deg, #FFD3A5 0%, #FD9853 100%)', // Level 8 - Orange
                    'linear-gradient(135deg, #8EC5FC 0%, #E0C3FC 100%)'  // Level 9 - Light Blue to Purple
                ];
                
                // Cycle through gradients if depth exceeds available gradients
                return gradients[depth % gradients.length];
            },

            generateNodeContent(nodeData) {
                const address = nodeData.nodeId;
                const data = addressData[address];
                const depth = nodeData.depth || 0; // Get the depth from node data
                
                if (address === 'root') {
                    return nodeData.template; // Root node template is handled by NodeFactory
                }

                const headerGradient = this.getHeaderGradient(depth);

                // Organize stats into categories for better visual hierarchy
                const activityStats = [
                    { 
                        icon: '💰', 
                        label: 'AE Volume', 
                        value: Utils.safeGet(data, 'total_volume', 0, (value) => Number(value || '0').toFixed(2)),
                        unit: 'AE',
                        color: '#10B981'
                    },
                    { 
                        icon: '🔄', 
                        label: 'Total TX', 
                        value: Utils.safeGet(data, 'total_tx_count'),
                        color: '#3B82F6'
                    },
                    { 
                        icon: '📈', 
                        label: 'Buy TX', 
                        value: Utils.safeGet(data, 'total_buy_tx_count'),
                        color: '#10B981'
                    },
                    { 
                        icon: '📉', 
                        label: 'Sell TX', 
                        value: Utils.safeGet(data, 'total_sell_tx_count'),
                        color: '#EF4444'
                    }
                ];

                const creationStats = [
                    { 
                        icon: '🪙', 
                        label: 'Created Tokens', 
                        value: Utils.safeGet(data, 'total_created_tokens'),
                        color: '#F59E0B'
                    },
                    { 
                        icon: '📧', 
                        label: 'Sent Invites', 
                        value: Utils.safeGet(data, 'total_invitation_count'),
                        color: '#8B5CF6'
                    },
                    { 
                        icon: '✅', 
                        label: 'Claimed', 
                        value: Utils.safeGet(data, 'total_claimed_invitation_count'),
                        color: '#10B981'
                    },
                    { 
                        icon: '❌', 
                        label: 'Revoked', 
                        value: Utils.safeGet(data, 'total_revoked_invitation_count'),
                        color: '#EF4444'
                    }
                ];

                const activityStatsHtml = activityStats
                    .map(stat => `
                        <div style="display: flex; align-items: center; margin-bottom: 8px; padding: 6px 8px; background: #F8FAFC; border-radius: 6px;">
                            <span style="font-size: 16px; margin-right: 8px;">${stat.icon}</span>
                            <div style="flex: 1;">
                                <div style="font-size: 11px; color: #64748B; font-weight: 500;">${stat.label}</div>
                                <div style="font-size: 14px; color: ${stat.color}; font-weight: 600;">${stat.value}${stat.unit ? ' ' + stat.unit : ''}</div>
                            </div>
                        </div>
                    `)
                    .join('');

                const creationStatsHtml = creationStats
                    .map(stat => `
                        <div style="display: flex; align-items: center; margin-bottom: 8px; padding: 6px 8px; background: #F8FAFC; border-radius: 6px;">
                            <span style="font-size: 16px; margin-right: 8px;">${stat.icon}</span>
                            <div style="flex: 1;">
                                <div style="font-size: 11px; color: #64748B; font-weight: 500;">${stat.label}</div>
                                <div style="font-size: 14px; color: ${stat.color}; font-weight: 600;">${stat.value}</div>
                            </div>
                        </div>
                    `)
                    .join('');

                return `
                    <div style="
                        font-family: '${CHART_CONFIG.styles.fontFamily}', sans-serif;
                        background: linear-gradient(135deg, #FFFFFF 0%, #F8FAFC 100%);
                        position: absolute;
                        margin-top: -1px; 
                        margin-left: -1px;
                        width: ${CHART_CONFIG.node.width}px;
                        height: ${CHART_CONFIG.node.height}px;
                        border-radius: 16px;
                        border: 2px solid #E2E8F0;
                        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
                        overflow: hidden;
                    ">
                        <!-- Header Section -->
                        <div style="
                            background: ${headerGradient};
                            padding: 16px;
                            position: relative;
                        ">
                            <!-- Profile Avatar -->
                            <div style="
                                position: absolute;
                                top: 10px;
                                left: 16px;
                                width: 40px;
                                height: 40px;
                                border-radius: 50%;
                                border: 4px solid white;
                                background: white;
                                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
                                overflow: hidden;
                            ">
                                <a href="${CHART_CONFIG.api.accountsBaseUrl}${address}" target="_blank">
                                    <img src="${CHART_CONFIG.api.avatarBaseUrl}${address}" 
                                         style="width: 100%; height: 100%; object-fit: cover;" />
                                </a>
                            </div>
                            
                            <!-- User Info -->
                            <div style="margin-left: 80px; color: white;">
                                <div style="font-size: 16px; font-weight: 700; margin-bottom: 4px;">
                                    ${Utils.formatAddress(address)}
                                </div>
                                <div style="font-size: 12px; opacity: 0.9;">
                                    Platform Member
                                </div>
                            </div>
                            
                            <!-- Menu Icon -->
                            <div style="
                                position: absolute;
                                top: 16px;
                                right: 16px;
                                color: white;
                                opacity: 0.8;
                                cursor: pointer;
                            ">
                                <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"/>
                                </svg>
                            </div>
                        </div>

                        <!-- Content Section -->
                        <div style="padding: 20px 16px;">
                            <!-- Trading Activity Section -->
                            <div style="margin-bottom: 20px;">
                                <h4 style="
                                    margin: 0 0 12px 0;
                                    font-size: 13px;
                                    font-weight: 600;
                                    color: #374151;
                                    text-transform: uppercase;
                                    letter-spacing: 0.5px;
                                ">Trading Activity</h4>
                                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 8px;">
                                    ${activityStatsHtml}
                                </div>
                            </div>

                            <!-- Creation & Invitations Section -->
                            <div>
                                <h4 style="
                                    margin: 0 0 12px 0;
                                    font-size: 13px;
                                    font-weight: 600;
                                    color: #374151;
                                    text-transform: uppercase;
                                    letter-spacing: 0.5px;
                                ">Creation & Invitations</h4>
                                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 8px;">
                                    ${creationStatsHtml}
                                </div>
                            </div>
                        </div>

                        <!-- Status Indicator -->
                        <div style="
                            position: absolute;
                            bottom: 12px;
                            right: 12px;
                            width: 8px;
                            height: 8px;
                            background: #10B981;
                            border-radius: 50%;
                            box-shadow: 0 0 0 2px white, 0 0 0 4px #10B981;
                        "></div>
                    </div>
                `;
            }
        };

        // Data Processing Module
        const DataProcessor = {
            addressData: {},

            collectAddressData(data) {
                const allAddresses = new Set();
                
                data.forEach(inviter => {
                    allAddresses.add(inviter.sender_address);
                    this.addressData[inviter.sender_address] = inviter.sender;
                    
                    inviter.invitees.forEach(invitee => {
                        if (invitee?.address) {
                            allAddresses.add(invitee.address);
                            this.addressData[invitee.address] = invitee;
                        }
                    });
                });

                console.log("addressData::", this.addressData);
                return allAddresses;
            },

            createNodes(data, allAddresses) {
                const nodes = {};

                // Calculate total volume from all invitees
                const totalVolume = this.calculateTotalVolume(data);

                // Create root node with total volume
                nodes['root'] = NodeFactory.createRootNode(data.length, totalVolume);

                // Create nodes for all addresses
                allAddresses.forEach(address => {
                    nodes[address] = NodeFactory.createAddressNode(address);
                });

                return nodes;
            },

            calculateTotalVolume(data) {
                let totalVolume = 0;
                
                // Sum volume from all inviters (senders)
                data.forEach(inviter => {
                    const senderData = this.addressData[inviter.sender_address];
                    if (senderData && senderData.total_volume) {
                        totalVolume += Number(senderData.total_volume || 0);
                    }
                    
                    // Sum volume from all invitees
                    if (inviter.invitees && Array.isArray(inviter.invitees)) {
                        inviter.invitees.forEach(invitee => {
                            if (invitee && invitee.address) {
                                const inviteeData = this.addressData[invitee.address];
                                if (inviteeData && inviteeData.total_volume) {
                                    totalVolume += Number(inviteeData.total_volume || 0);
                                }
                            }
                        });
                    }
                });
                
                return totalVolume;
            },

            buildRelationshipMap(data) {
                const relationshipMap = new Map();

                data.forEach((inv) => {
                    const invitees = [];
                    if (inv.invitees) {
                        inv.invitees.forEach((invitee) => {
                            if (invitee?.address) {
                                invitees.push(invitee.address);
                            }
                        });
                    }
                    relationshipMap.set(inv.sender_address, invitees);
                });

                return relationshipMap;
            },

            hasCycle(nodeId, relationshipMap, visited = new Set(), path = new Set()) {
                if (path.has(nodeId)) return true;
                if (visited.has(nodeId)) return false;

                visited.add(nodeId);
                path.add(nodeId);

                const children = relationshipMap.get(nodeId) || [];
                for (const child of children) {
                    if (this.hasCycle(child, relationshipMap, visited, path)) return true;
                }

                path.delete(nodeId);
                return false;
            },

            establishRelationships(data, nodes, relationshipMap) {
                // Build parent-child relationships and update invitee counts
                data.forEach(inviter => {
                    const inviteeCount = inviter.invitees.length;
                    nodes[inviter.sender_address].directSubordinates = inviteeCount;
                    nodes[inviter.sender_address].totalSubordinates = inviteeCount;
                    nodes[inviter.sender_address].template = NodeFactory.createAddressNode(inviter.sender_address, inviteeCount).template;

                    // Set parent relationships (avoid cycles)
                    inviter.invitees.forEach(invitee => {
                        if (!invitee) return;
                        
                        if (nodes[invitee.address] && !this.hasCycle(invitee.address, relationshipMap)) {
                            nodes[invitee.address].parentNodeId = inviter.sender_address;
                        }
                    });
                });
            },

            calculateDepths(nodes) {
                // Calculate depth for each node based on its hierarchy position
                const visited = new Set();
                
                const calculateNodeDepth = (nodeId, currentDepth = 0) => {
                    if (visited.has(nodeId)) return;
                    visited.add(nodeId);
                    
                    const node = nodes[nodeId];
                    if (!node) return;
                    
                    node.depth = currentDepth;
                    
                    // Find all children of this node
                    Object.values(nodes).forEach(childNode => {
                        if (childNode.parentNodeId === nodeId) {
                            calculateNodeDepth(childNode.nodeId, currentDepth + 1);
                        }
                    });
                };
                
                // Start from root node with depth 0
                calculateNodeDepth('root', 0);
                
                // Handle any orphaned nodes that might not be connected to root
                Object.values(nodes).forEach(node => {
                    if (node.depth === undefined) {
                        node.depth = 0; // Default depth for orphaned nodes
                    }
                });
            },

            establishRootConnections(data, nodes) {
                const rootNodes = new Set();
                
                // Find all invitees
                const inviteeSet = new Set();
                data.forEach(inviter => {
                    inviter.invitees.forEach(invitee => {
                        if (invitee?.address) {
                            inviteeSet.add(invitee.address);
                        }
                    });
                });

                // Connect orphaned nodes to root
                Object.values(nodes).forEach(node => {
                    if (node.nodeId !== 'root' && node.parentNodeId === null) {
                        node.parentNodeId = 'root';
                    }
                });

                // Identify natural root nodes (inviters who are not invitees)
                data.forEach(inviter => {
                    if (!inviteeSet.has(inviter.sender_address)) {
                        rootNodes.add(inviter.sender_address);
                        if (nodes[inviter.sender_address]) {
                            nodes[inviter.sender_address].parentNodeId = 'root';
                        }
                    }
                });

                // Fallback: use first inviter as root if no natural roots found
                if (rootNodes.size === 0 && data.length > 0) {
                    rootNodes.add(data[0].sender_address);
                    if (nodes[data[0].sender_address]) {
                        nodes[data[0].sender_address].parentNodeId = 'root';
                    }
                }

                console.log("rootNodes::", rootNodes);
                return rootNodes;
            }
        };

        // Make addressData globally accessible for template generation
        const addressData = DataProcessor.addressData;

        function buildOrgChartData(data) {
            // Step 1: Collect all address data
            const allAddresses = DataProcessor.collectAddressData(data);

            // Step 2: Create all nodes
            const nodes = DataProcessor.createNodes(data, allAddresses);

            // Step 3: Build relationship map
            const relationshipMap = DataProcessor.buildRelationshipMap(data);

            // Step 4: Establish parent-child relationships
            DataProcessor.establishRelationships(data, nodes, relationshipMap);

            // Step 5: Connect orphaned nodes to root
            DataProcessor.establishRootConnections(data, nodes);

            // Step 6: Calculate depth for each node
            DataProcessor.calculateDepths(nodes);

            // Convert nodes object to array
            return Object.values(nodes);
        }

        // Chart Renderer
        const ChartRenderer = {
            create(affiliationData) {
                const chartData = buildOrgChartData(affiliationData);
                console.log("chartData::", chartData);

                const chart = new d3.OrgChart()
                    .container('#chart-container')
                    .data(chartData)
                    .svgWidth(window.innerWidth)
                    .svgHeight(window.innerHeight)
                    .nodeHeight((d) => CHART_CONFIG.node.height)
                    .nodeWidth((d) => CHART_CONFIG.node.width)
                    .initialZoom(CHART_CONFIG.chart.initialZoom)
                    .onNodeClick(d => console.log(d + ' node clicked'))
                    .nodeContent((d, i, arr, state) => TemplateGenerator.generateNodeContent(d.data))
                    .render();

                return chart;
            }
        };

        function renderChart(affiliationData) {
            return ChartRenderer.create(affiliationData);
        }

        // Data Fetching Module
        const DataFetcher = {
            invitations: [],

            async fetchInvitations(page = 1) {
                try {
                    const response = await fetch(`${CHART_CONFIG.api.invitationsPath}?page=${page}&limit=${CHART_CONFIG.api.pageLimit}`);
                    const data = await response.json();
                    
                    console.log("========================");
                    console.log("data::", data);
                    console.log("========================");
                    
                    this.invitations.push(...(data.items || []));
                    
                    if (data.meta.totalPages > page) {
                        await this.fetchInvitations(page + 1);
                    }
                } catch (error) {
                    console.error('Error fetching invitations:', error);
                }
            },

            processInvitationData() {
                const customData = {};
                
                for (const invitation of this.invitations) {
                    if (!invitation.invitee_address) {
                        continue;
                    }
                    
                    if (!customData[invitation.sender_address]) {
                        customData[invitation.sender_address] = {
                            sender_address: invitation.sender_address,
                            sender: invitation.sender,
                            invitees: [],
                            amount: 0
                        };
                    }

                    customData[invitation.sender_address].amount += invitation.amount;
                    
                    if (invitation.invitee) {
                        customData[invitation.sender_address].invitees.push(invitation.invitee);
                    }
                }

                console.log('=====================');
                console.log('customData::', customData);
                console.log('customData->entries::', Object.values(customData));
                console.log('=====================');

                return Object.values(customData);
            }
        };

        // Application Main
        const AffiliationApp = {
            async initialize() {
                try {
                    // Fetch invitation data
                    await DataFetcher.fetchInvitations();
                    
                    // Process the data
                    const processedData = DataFetcher.processInvitationData();
                    
                    // Render the chart after a delay
                    setTimeout(() => {
                        renderChart(processedData);
                    }, CHART_CONFIG.chart.renderDelay);
                    
                } catch (error) {
                    console.error('Error initializing affiliation app:', error);
                }
            }
        };

        // Initialize the application when DOM is ready
        document.addEventListener('DOMContentLoaded', () => AffiliationApp.initialize());
    </script>
</body>

</html>